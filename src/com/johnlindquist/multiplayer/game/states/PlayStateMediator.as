package com.johnlindquist.multiplayer.game.states{	import flight.binding.Bind;	import com.johnlindquist.multiplayer.game.heroes.Hero;	import com.johnlindquist.multiplayer.game.heroes.MyHero;	import com.johnlindquist.multiplayer.game.heroes.OtherHero;	import com.johnlindquist.multiplayer.game.model.GameModel;	import com.johnlindquist.multiplayer.signals.HeroReset;	import com.johnlindquist.multiplayer.signals.HeroUpdated;	import com.johnlindquist.multiplayer.signals.MyUserAdded;	import com.johnlindquist.multiplayer.signals.OtherHeroKilled;	import org.robotlegs.mvcs.Mediator;	/**	 * @author John Lindquist	 */	public class PlayStateMediator extends Mediator	{		[Inject]		public var view:PlayState;		[Inject]		public var gameModel:GameModel;		[Inject]		public var heroUpdated:HeroUpdated;				[Inject]		public var otherHeroKilled:OtherHeroKilled;				[Inject]		public var heroReset:HeroReset;				public var myUserAdded:MyUserAdded;				override public function onRegister():void		{			view.heroUpdated.add(onHeroUpdated);						view.myHero = gameModel.myHero;				view.addHeroes(gameModel.heroes);			Bind.addBinding(view, "heroes", gameModel, "heroes");			Bind.addBinding(view.score, "text", gameModel.myHero, "score");						view.myHero.otherHeroKilled.add(onOtherHeroKilled);			view.heroReset.add(onHeroReset);		}		private function onHeroReset(hero:Hero):void 		{			heroReset.dispatch(hero);	
		}
		private function onScoreUpdate():void 		{			view.score.text = String(gameModel.myHero.score);		}
		private function onOtherHeroKilled(otherHero:OtherHero):void 		{			otherHeroKilled.dispatch(otherHero);			
		}
		private function onHeroUpdated(myHero:MyHero):void 		{			heroUpdated.dispatch(myHero);		
		}
	}}